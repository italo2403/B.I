{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNhZjXCVfQhbNhgbbzKOVGb",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/italo2403/B.I/blob/main/DataWarehouse\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 142
        },
        "id": "DSYC9n4L-K6y",
        "outputId": "5ac5d7ba-bc92-4b1a-8912-912de78eb543"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Comparação de Preços entre os Data Warehouses A e B:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  Nome do Produto  Preço (DataWarehouse A)  Preço (DataWarehouse B)  Diferença\n",
              "0   Camiseta Polo                     29.9                     31.5       -1.6\n",
              "1   Tênis Running                     45.5                     44.0        1.5"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8e1ed0a1-787b-4c19-841f-3a66b8f2d9d2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Nome do Produto</th>\n",
              "      <th>Preço (DataWarehouse A)</th>\n",
              "      <th>Preço (DataWarehouse B)</th>\n",
              "      <th>Diferença</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Camiseta Polo</td>\n",
              "      <td>29.9</td>\n",
              "      <td>31.5</td>\n",
              "      <td>-1.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Tênis Running</td>\n",
              "      <td>45.5</td>\n",
              "      <td>44.0</td>\n",
              "      <td>1.5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8e1ed0a1-787b-4c19-841f-3a66b8f2d9d2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8e1ed0a1-787b-4c19-841f-3a66b8f2d9d2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8e1ed0a1-787b-4c19-841f-3a66b8f2d9d2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-bf3a9d80-a6c1-4f14-8363-f69429455eaa\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bf3a9d80-a6c1-4f14-8363-f69429455eaa')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-bf3a9d80-a6c1-4f14-8363-f69429455eaa button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_8500fdd1-84f4-459c-a00e-c2ae605023fd\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_comparacao')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_8500fdd1-84f4-459c-a00e-c2ae605023fd button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_comparacao');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_comparacao",
              "summary": "{\n  \"name\": \"df_comparacao\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Nome do Produto\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"T\\u00eanis Running\",\n          \"Camiseta Polo\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pre\\u00e7o (DataWarehouse A)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.030865786510143,\n        \"min\": 29.9,\n        \"max\": 45.5,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          45.5,\n          29.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pre\\u00e7o (DataWarehouse B)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.838834764831844,\n        \"min\": 31.5,\n        \"max\": 44.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          44.0,\n          31.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Diferen\\u00e7a\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.1920310216782974,\n        \"min\": -1.6,\n        \"max\": 1.5,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.5,\n          -1.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ],
      "source": [
        "import sqlite3\n",
        "import pandas as pd\n",
        "from datetime import datetime\n",
        "\n",
        "# Função para criar as tabelas e inserir dados em um banco de dados dado seu nome\n",
        "def criar_datawarehouse(db_name, precos_data):\n",
        "    conn = sqlite3.connect(db_name)\n",
        "    cursor = conn.cursor()\n",
        "\n",
        "    # Criação das tabelas de dimensão e da tabela de fatos\n",
        "    # Dimensão de Produtos\n",
        "    cursor.execute('''\n",
        "        CREATE TABLE IF NOT EXISTS Dim_Produto (\n",
        "            ID_Produto INTEGER PRIMARY KEY,\n",
        "            Nome_Produto TEXT,\n",
        "            Categoria TEXT,\n",
        "            Marca TEXT\n",
        "        )\n",
        "    ''')\n",
        "\n",
        "    # Dimensão de Concorrentes\n",
        "    cursor.execute('''\n",
        "        CREATE TABLE IF NOT EXISTS Dim_Concorrente (\n",
        "            ID_Concorrente INTEGER PRIMARY KEY,\n",
        "            Nome_Concorrente TEXT,\n",
        "            URL_Concorrente TEXT\n",
        "        )\n",
        "    ''')\n",
        "\n",
        "    # Dimensão de Tempo\n",
        "    cursor.execute('''\n",
        "        CREATE TABLE IF NOT EXISTS Dim_Tempo (\n",
        "            ID_Tempo INTEGER PRIMARY KEY,\n",
        "            Data TEXT,\n",
        "            Mes TEXT,\n",
        "            Ano INTEGER,\n",
        "            Dia_da_Semana TEXT\n",
        "        )\n",
        "    ''')\n",
        "\n",
        "    # Tabela de Fato: registra os preços coletados\n",
        "    cursor.execute('''\n",
        "        CREATE TABLE IF NOT EXISTS Fato_Precos (\n",
        "            ID_Fato INTEGER PRIMARY KEY AUTOINCREMENT,\n",
        "            ID_Produto INTEGER,\n",
        "            ID_Concorrente INTEGER,\n",
        "            ID_Tempo INTEGER,\n",
        "            Preco REAL,\n",
        "            FOREIGN KEY(ID_Produto) REFERENCES Dim_Produto(ID_Produto),\n",
        "            FOREIGN KEY(ID_Concorrente) REFERENCES Dim_Concorrente(ID_Concorrente),\n",
        "            FOREIGN KEY(ID_Tempo) REFERENCES Dim_Tempo(ID_Tempo)\n",
        "        )\n",
        "    ''')\n",
        "    conn.commit()\n",
        "\n",
        "    # Inserção dos dados de exemplo nas dimensões\n",
        "    produtos = [\n",
        "        (101, 'Camiseta Polo', 'Vestuário', 'Marca X'),\n",
        "        (102, 'Tênis Running', 'Calçados', 'Marca Y')\n",
        "    ]\n",
        "    cursor.executemany('INSERT OR IGNORE INTO Dim_Produto VALUES (?,?,?,?)', produtos)\n",
        "\n",
        "    concorrentes = [\n",
        "        (201, 'Loja Online A', 'https://www.lojaonlinea.com'),\n",
        "        (202, 'Marketplace B', 'https://www.marketplaceb.com')\n",
        "    ]\n",
        "    cursor.executemany('INSERT OR IGNORE INTO Dim_Concorrente VALUES (?,?,?)', concorrentes)\n",
        "\n",
        "    # Inserção na dimensão de tempo (usando a data atual)\n",
        "    now = datetime.now()\n",
        "    data_str = now.strftime(\"%d/%m/%Y\")\n",
        "    mes_str = now.strftime(\"%B\")\n",
        "    ano = now.year\n",
        "    dia_semana = now.strftime(\"%A\")\n",
        "    id_tempo = int(now.strftime(\"%Y%m%d\"))  # Exemplo: 20250313\n",
        "    cursor.execute('INSERT OR IGNORE INTO Dim_Tempo VALUES (?,?,?,?,?)',\n",
        "                   (id_tempo, data_str, mes_str, ano, dia_semana))\n",
        "    conn.commit()\n",
        "\n",
        "    # Inserção dos dados na tabela de fatos\n",
        "    # 'precos_data' é uma lista de tuplas: (ID_Produto, ID_Concorrente, ID_Tempo, Preco)\n",
        "    cursor.executemany('''\n",
        "        INSERT INTO Fato_Precos (ID_Produto, ID_Concorrente, ID_Tempo, Preco)\n",
        "        VALUES (?,?,?,?)\n",
        "    ''', precos_data)\n",
        "    conn.commit()\n",
        "\n",
        "    conn.close()\n",
        "\n",
        "# Dados para o Data Warehouse A\n",
        "# Valores simulados coletados (por exemplo, de uma fonte A)\n",
        "precos_a = [\n",
        "    (101, 201, int(datetime.now().strftime(\"%Y%m%d\")), 29.90),\n",
        "    (102, 202, int(datetime.now().strftime(\"%Y%m%d\")), 45.50)\n",
        "]\n",
        "\n",
        "# Dados para o Data Warehouse B\n",
        "# Valores simulados coletados (por exemplo, de uma fonte B, com preços ligeiramente diferentes)\n",
        "precos_b = [\n",
        "    (101, 201, int(datetime.now().strftime(\"%Y%m%d\")), 31.50),\n",
        "    (102, 202, int(datetime.now().strftime(\"%Y%m%d\")), 44.00)\n",
        "]\n",
        "\n",
        "# Cria os dois bancos de dados\n",
        "criar_datawarehouse('datawarehouse_a.db', precos_a)\n",
        "criar_datawarehouse('datawarehouse_b.db', precos_b)\n",
        "\n",
        "# Abre conexão com o primeiro banco de dados (Data Warehouse A)\n",
        "conn = sqlite3.connect('datawarehouse_a.db')\n",
        "cursor = conn.cursor()\n",
        "\n",
        "# Anexa o segundo banco de dados (Data Warehouse B) usando o comando ATTACH\n",
        "cursor.execute(\"ATTACH DATABASE 'datawarehouse_b.db' AS db_b\")\n",
        "\n",
        "# Consulta que compara a média dos preços de cada produto entre os dois Data Warehouses\n",
        "query_comparacao = '''\n",
        "SELECT\n",
        "    a_dp.Nome_Produto,\n",
        "    ROUND(a_avg.Avg_Preco_A, 2) AS Preco_A,\n",
        "    ROUND(b_avg.Avg_Preco_B, 2) AS Preco_B,\n",
        "    ROUND((a_avg.Avg_Preco_A - b_avg.Avg_Preco_B), 2) AS Diferenca\n",
        "FROM\n",
        "    (\n",
        "        SELECT dp.ID_Produto, dp.Nome_Produto, AVG(fp.Preco) AS Avg_Preco_A\n",
        "        FROM Fato_Precos fp\n",
        "        JOIN Dim_Produto dp ON fp.ID_Produto = dp.ID_Produto\n",
        "        GROUP BY dp.ID_Produto\n",
        "    ) AS a_avg\n",
        "JOIN Dim_Produto a_dp ON a_dp.ID_Produto = a_avg.ID_Produto\n",
        "JOIN\n",
        "    (\n",
        "        SELECT dp.ID_Produto, AVG(fp.Preco) AS Avg_Preco_B\n",
        "        FROM db_b.Fato_Precos fp\n",
        "        JOIN db_b.Dim_Produto dp ON fp.ID_Produto = dp.ID_Produto\n",
        "        GROUP BY dp.ID_Produto\n",
        "    ) AS b_avg ON a_avg.ID_Produto = b_avg.ID_Produto;\n",
        "'''\n",
        "\n",
        "# Executa a consulta de comparação\n",
        "cursor.execute(query_comparacao)\n",
        "resultados = cursor.fetchall()\n",
        "\n",
        "# Converte os resultados para um DataFrame do Pandas para melhor visualização\n",
        "df_comparacao = pd.DataFrame(resultados, columns=[\"Nome do Produto\", \"Preço (DataWarehouse A)\", \"Preço (DataWarehouse B)\", \"Diferença\"])\n",
        "print(\"Comparação de Preços entre os Data Warehouses A e B:\")\n",
        "display(df_comparacao)\n",
        "\n",
        "# Fecha a conexão\n",
        "conn.close()\n"
      ]
    }
  ]
}